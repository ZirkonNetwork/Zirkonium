From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Elephant1214 <46881115+Elephant1214@users.noreply.github.com>
Date: Tue, 8 Jul 2025 12:06:39 -0600
Subject: [PATCH] Implement Sneaky


diff --git a/net/minecraft/server/MinecraftServer.java b/net/minecraft/server/MinecraftServer.java
index 9eb35364757b5748f7228c1557e9350edc805440..54c2673ac20130302f3d8e5a82634a1ff254f540 100644
--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -922,6 +922,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         return this.saveAllChunks(suppressLog, flush, forced, false);
     }
     public boolean saveAllChunks(boolean suppressLog, boolean flush, boolean forced, boolean close) {
+        if (me.elephant1214.zirkonium.configuration.ZirkoniumConfig.sneaky) com.adryd.sneaky.IPList.INSTANCE.saveToFile(false);
         // Paper end - add close param
         boolean flag = false;
 
diff --git a/net/minecraft/server/dedicated/DedicatedServer.java b/net/minecraft/server/dedicated/DedicatedServer.java
index 463a9d9b15301e7139bd36435214662aa3ccf63d..34d315b510c5e0d5b62092b7d9d4f1dcae10429c 100644
--- a/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/net/minecraft/server/dedicated/DedicatedServer.java
@@ -192,6 +192,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         // Purpur start - Purpur config files
         try {
             org.purpurmc.purpur.PurpurConfig.init((java.io.File) options.valueOf("purpur-settings"));
+            me.elephant1214.zirkonium.configuration.ZirkoniumConfig.init((java.io.File) options.valueOf("zirkonium-settings"));
         } catch (Exception e) {
             DedicatedServer.LOGGER.error("Unable to load server configuration", e);
             return false;
diff --git a/net/minecraft/server/network/LegacyQueryHandler.java b/net/minecraft/server/network/LegacyQueryHandler.java
index 82efa8875605804bf03ae9079ffba9102dcad2cc..c96bea9567c10b8fccf60bfef8351877d084b7b1 100644
--- a/net/minecraft/server/network/LegacyQueryHandler.java
+++ b/net/minecraft/server/network/LegacyQueryHandler.java
@@ -13,6 +13,7 @@ import org.slf4j.Logger;
 
 public class LegacyQueryHandler extends ChannelInboundHandlerAdapter {
     private static final Logger LOGGER = LogUtils.getLogger();
+    private static final ServerInfo EMPTY_INFO = new com.adryd.sneaky.util.LegacyPingMetadata();
     private final ServerInfo server;
     private ByteBuf buf; // Paper
 
@@ -43,11 +44,21 @@ public class LegacyQueryHandler extends ChannelInboundHandlerAdapter {
                     return;
                 }
 
+                // Zirkonium start - Sneaky - Disable legacy query
+                if (me.elephant1214.zirkonium.configuration.ZirkoniumConfig.sneaky && me.elephant1214.zirkonium.configuration.ZirkoniumConfig.disableLegacyQuery) {
+                    context.close();
+                    return;
+                } // Zirkonium end - Sneaky - Disable legacy query
                 SocketAddress socketAddress = context.channel().remoteAddress();
                 int i = byteBuf.readableBytes();
                 String string = null; // Paper
                 if (i == 0) {
                     LOGGER.debug("Ping: (<1.3.x) from {}", net.minecraft.server.MinecraftServer.getServer().logIPs() ? socketAddress : "<ip address withheld>"); // Paper - Respect logIPs option
+                    // Zirkonium start - Sneaky - Skip ping event when ping data is hidden
+                    if (me.elephant1214.zirkonium.configuration.ZirkoniumConfig.sneaky && me.elephant1214.zirkonium.configuration.ZirkoniumConfig.hideServerPingData
+                        && !com.adryd.sneaky.IPList.INSTANCE.canPing(context.channel().remoteAddress())) {
+                        string = String.format(String.format(Locale.ROOT, "%s\u00a7%d\u00a7%d", EMPTY_INFO.getMotd(), EMPTY_INFO.getPlayerCount(), EMPTY_INFO.getMaxPlayers()));
+                    } else {
                     // Paper start - Call PaperServerListPingEvent and use results
                     com.destroystokyo.paper.event.server.PaperServerListPingEvent event = com.destroystokyo.paper.network.PaperLegacyStatusClient.processRequest(net.minecraft.server.MinecraftServer.getServer(), (java.net.InetSocketAddress) socketAddress, 39, null);
                     if (event == null) {
@@ -58,6 +69,7 @@ public class LegacyQueryHandler extends ChannelInboundHandlerAdapter {
                     }
                     string = String.format(Locale.ROOT, "%s§%d§%d", com.destroystokyo.paper.network.PaperLegacyStatusClient.getUnformattedMotd(event), event.getNumPlayers(), event.getMaxPlayers());
                     // Paper end - Call PaperServerListPingEvent and use results
+                    } // Zirkonium end - Sneaky - Skip ping event when ping data is hidden
                     sendFlushAndClose(context, createLegacyDisconnectPacket(context.alloc(), string));
                 } else {
                     if (byteBuf.readUnsignedByte() != 1) {
@@ -79,6 +91,11 @@ public class LegacyQueryHandler extends ChannelInboundHandlerAdapter {
 
                     // Paper start - Call PaperServerListPingEvent and use results
                     if (string == null) {
+                        // Zirkonium start - Sneaky - Skip ping event when ping data is hidden
+                        if (me.elephant1214.zirkonium.configuration.ZirkoniumConfig.sneaky && me.elephant1214.zirkonium.configuration.ZirkoniumConfig.hideServerPingData
+                            && !com.adryd.sneaky.IPList.INSTANCE.canPing(context.channel().remoteAddress())) {
+                            string = String.format(Locale.ROOT, "§1\u0000%d\u0000%s\u0000%s\u0000%d\u0000%d", 127, this.server.getServerVersion(), EMPTY_INFO.getMotd(), EMPTY_INFO.getPlayerCount(), EMPTY_INFO.getMaxPlayers());
+                        } else {
                         com.destroystokyo.paper.event.server.PaperServerListPingEvent event = com.destroystokyo.paper.network.PaperLegacyStatusClient.processRequest(net.minecraft.server.MinecraftServer.getServer(), (java.net.InetSocketAddress) socketAddress, 127, null); // Paper
                         if (event == null) {
                             context.close();
@@ -97,6 +114,7 @@ public class LegacyQueryHandler extends ChannelInboundHandlerAdapter {
                             event.getMaxPlayers()
                         );
                         // Paper end - Call PaperServerListPingEvent and use results
+                        } // Zirkonium end - Sneaky - Skip ping event when ping data is hidden
                     }
                     sendFlushAndClose(context, createLegacyDisconnectPacket(context.alloc(), string));
                 }
@@ -169,6 +187,11 @@ public class LegacyQueryHandler extends ChannelInboundHandlerAdapter {
     }
 
     private @javax.annotation.Nullable String readLegacy1_6(ChannelHandlerContext ctx, ByteBuf part) {
+        // Zirkonium start - Sneaky - disable legacy query
+        if (me.elephant1214.zirkonium.configuration.ZirkoniumConfig.sneaky && me.elephant1214.zirkonium.configuration.ZirkoniumConfig.disableLegacyQuery) {
+            ctx.close();
+            return null;
+        }  // Zirkonium end - Sneaky - disable legacy query
         ByteBuf buf = this.buf;
 
         if (buf == null) {
@@ -225,8 +248,15 @@ public class LegacyQueryHandler extends ChannelInboundHandlerAdapter {
             return null;
         }
 
-        String response = String.format("§1\u0000%d\u0000%s\u0000%s\u0000%d\u0000%d", event.getProtocolVersion(), event.getVersion(),
+        // Zirkonium start - Sneaky - Hide query data
+        String response;
+        if (me.elephant1214.zirkonium.configuration.ZirkoniumConfig.sneaky && me.elephant1214.zirkonium.configuration.ZirkoniumConfig.hideServerPingData
+            && !com.adryd.sneaky.IPList.INSTANCE.canPing(ctx.channel().remoteAddress())) {
+            response = String.format(Locale.ROOT, "§1\u0000%d\u0000%s\u0000%s\u0000%d\u0000%d", 127, this.server.getServerVersion(), EMPTY_INFO.getMotd(), EMPTY_INFO.getPlayerCount(), EMPTY_INFO.getMaxPlayers());
+        } else {
+            response = String.format("§1\u0000%d\u0000%s\u0000%s\u0000%d\u0000%d", event.getProtocolVersion(), event.getVersion(),
             com.destroystokyo.paper.network.PaperLegacyStatusClient.getMotd(event), event.getNumPlayers(), event.getMaxPlayers());
+        } // Zirkonium end - Sneaky - Hide query data
         return response;
     }
 
@@ -249,6 +279,7 @@ public class LegacyQueryHandler extends ChannelInboundHandlerAdapter {
     // Paper end
 
     private static void sendFlushAndClose(ChannelHandlerContext context, ByteBuf buffer) {
+        if (me.elephant1214.zirkonium.configuration.ZirkoniumConfig.sneaky && me.elephant1214.zirkonium.configuration.ZirkoniumConfig.disableLegacyQuery) return; // Zirkonium - Sneaky
         context.pipeline().firstContext().writeAndFlush(buffer).addListener(ChannelFutureListener.CLOSE);
     }
 
diff --git a/net/minecraft/server/network/ServerConnectionListener.java b/net/minecraft/server/network/ServerConnectionListener.java
index bd07e6a5aa1883786d789ea71711a0c0c0a95c26..8ebb3a02851f8ce5d186bda34e75641e2d214e1a 100644
--- a/net/minecraft/server/network/ServerConnectionListener.java
+++ b/net/minecraft/server/network/ServerConnectionListener.java
@@ -121,6 +121,11 @@ public class ServerConnectionListener {
                             new ChannelInitializer<Channel>() {
                                 @Override
                                 protected void initChannel(Channel channel) {
+                                    // Zirkonium - Sneaky - Block banned IPs
+                                    if (!com.adryd.sneaky.Sneaky.shouldAllowConnection(channel.remoteAddress())) {
+                                        channel.close();
+                                        return;
+                                    } // Zirkonium - Sneaky - Block banned IPs
                                     try {
                                         channel.config().setOption(ChannelOption.TCP_NODELAY, true);
                                     } catch (ChannelException var5) {
diff --git a/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java b/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
index 94967a2a735180f7a4860ef4de3a9ad9fcc680db..64e41fe31894f59b6e18f65719442b8a1f95122e 100644
--- a/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
@@ -44,6 +44,11 @@ public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketL
                 ServerStatus status = this.server.getStatus();
                 this.connection.setupOutboundProtocol(StatusProtocols.CLIENTBOUND);
                 if (this.server.repliesToStatus() && status != null) {
+                    // Zirkonium start - Sneaky - Disable query until login
+                    if (me.elephant1214.zirkonium.configuration.ZirkoniumConfig.sneaky && me.elephant1214.zirkonium.configuration.ZirkoniumConfig.disableAllPingsUntilLogin && !com.adryd.sneaky.IPList.INSTANCE.canPing(this.connection.getRemoteAddress())) {
+                        this.connection.disconnect(IGNORE_STATUS_REASON);
+                        return;
+                    } // Zirkonium end - Sneaky - Disable query until login
                     this.connection.setupInboundProtocol(StatusProtocols.SERVERBOUND, new ServerStatusPacketListenerImpl(status, this.connection));
                 } else {
                     this.connection.disconnect(IGNORE_STATUS_REASON);
diff --git a/net/minecraft/server/network/ServerLoginPacketListenerImpl.java b/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
index 72115a4d2c54834f9edef02c83ed79f0fe380e78..086de57c00d1751dd36f84dac0c9d5a1e25e3ceb 100644
--- a/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -159,6 +159,7 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
 
     @Override
     public void onDisconnect(DisconnectionDetails details) {
+        if (me.elephant1214.zirkonium.configuration.ZirkoniumConfig.sneaky && me.elephant1214.zirkonium.configuration.ZirkoniumConfig.dontLogClientDisconnects && this.authenticatedProfile == null) return; // Zirkonium - Sneaky
         LOGGER.info("{} lost connection: {}", this.getUserName(), details.reason().getString());
     }
 
@@ -242,6 +243,7 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
                 this.state = ServerLoginPacketListenerImpl.State.WAITING_FOR_DUPE_DISCONNECT;
             } else {
                 this.finishLoginAndWaitForClient(profile);
+                com.adryd.sneaky.IPList.INSTANCE.addToIPList(this.connection.getRemoteAddress()); // Zirkonium - Sneaky - Add addresses to IPList
             }
         }
     }
@@ -316,6 +318,7 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
                         ServerLoginPacketListenerImpl.this.startClientVerification(ServerLoginPacketListenerImpl.this.createOfflineProfile(string1)); // Spigot
                     } else {
                         ServerLoginPacketListenerImpl.this.disconnect(org.purpurmc.purpur.PurpurConfig.unverifiedUsername.equals("default") ? Component.translatable("multiplayer.disconnect.unverified_username") : io.papermc.paper.adventure.PaperAdventure.asVanilla(net.kyori.adventure.text.minimessage.MiniMessage.miniMessage().deserialize(org.purpurmc.purpur.PurpurConfig.unverifiedUsername))); // Purpur - Config for unverified username message
+                        if (!(me.elephant1214.zirkonium.configuration.ZirkoniumConfig.sneaky && me.elephant1214.zirkonium.configuration.ZirkoniumConfig.dontLogServerDisconnects)) // Zirkonium - Sneaky
                         ServerLoginPacketListenerImpl.LOGGER.error("Username '{}' tried to join with an invalid session", string1);
                     }
                 } catch (AuthenticationUnavailableException var4) {
