From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Elephant1214 <46881115+Elephant1214@users.noreply.github.com>
Date: Sat, 24 Dec 2022 16:47:36 -0700
Subject: [PATCH] Zirkonium config


diff --git a/src/main/java/me/elephant1214/zirkonium/Zirkonium.java b/src/main/java/me/elephant1214/zirkonium/Zirkonium.java
new file mode 100644
index 0000000000000000000000000000000000000000..b7b1c5af289946d06dd28f6fb1afaddbbfc965d4
--- /dev/null
+++ b/src/main/java/me/elephant1214/zirkonium/Zirkonium.java
@@ -0,0 +1,8 @@
+package me.elephant1214.zirkonium;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public final class Zirkonium {
+    public static final Logger LOGGER = LoggerFactory.getLogger("Zirkonium");
+}
diff --git a/src/main/java/me/elephant1214/zirkonium/configuration/ZirkoniumConfig.java b/src/main/java/me/elephant1214/zirkonium/configuration/ZirkoniumConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..4f58f9ff66879afd0d95f4893be89760ca73dd39
--- /dev/null
+++ b/src/main/java/me/elephant1214/zirkonium/configuration/ZirkoniumConfig.java
@@ -0,0 +1,64 @@
+package me.elephant1214.zirkonium.configuration;
+
+import com.google.common.base.Throwables;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.io.File;
+import java.io.IOException;
+
+import static me.elephant1214.zirkonium.Zirkonium.LOGGER;
+
+@SuppressWarnings({"SameParameterValue", "deprecation"})
+public class ZirkoniumConfig {
+    private static final String HEADER = """
+            This is the main configuration file for Zirkonium.
+            There isn't much right now, but there will be more in the future. Changes here can affect gameplay on
+            your server negatively depending on what you want and don't want in your server, configure carefully.
+            """;
+    private static File CONFIG_FILE;
+    public static YamlConfiguration config;
+    public static int version;
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ignore) {
+        } catch (InvalidConfigurationException ex) {
+            LOGGER.error("Could not load zirkonium.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
+        }
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+
+        version = getInt("config-version", 1);
+        set("config-version", 1);
+
+        saveConfig();
+    }
+
+    static void saveConfig() {
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            LOGGER.error("Could not save {}", CONFIG_FILE, ex);
+        }
+    }
+
+    private static void set(String path, Object val) {
+        config.addDefault(path, val);
+        config.set(path, val);
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+}
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 2762f54515b352271feb4b26f506b06cd0fb1909..108bdf28e84c497226f907daaeccc228218a0ad2 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -242,6 +242,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         // Purpur start
         try {
             org.purpurmc.purpur.PurpurConfig.init((java.io.File) options.valueOf("purpur-settings"));
+            me.elephant1214.zirkonium.configuration.ZirkoniumConfig.init((java.io.File) options.valueOf("zirkonium-settings")); // Zirkonium
         } catch (Exception e) {
             DedicatedServer.LOGGER.error("Unable to load server configuration", e);
             return false;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 7443279fd48bd1b9dc0135e996dbc6fa2d584b54..bfd292cec2774659bc8dfc75d61922414f413132 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1085,6 +1085,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.init((File) this.console.options.valueOf("spigot-settings")); // Spigot
         this.console.paperConfigurations.reloadConfigs(this.console);
         org.purpurmc.purpur.PurpurConfig.init((File) console.options.valueOf("purpur-settings")); // Purpur
+        me.elephant1214.zirkonium.configuration.ZirkoniumConfig.init((File) console.options.valueOf("zirkonium-settings")); // Zirkonium
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index e35a562eec4b65335723c50180fe1471f858ae60..c3f7e18dbf955d758cc37f02fa8b5e0fa6fe22fb 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -190,6 +190,14 @@ public class Main {
                         .describedAs("Yml file");
                 // Purpur end
 
+                // Zirkonium start
+                acceptsAll(asList("zirkonium", "zirkonium-settings"), "File for Zirkonium settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("zirkonium.yml"))
+                        .describedAs("Yml file");
+                // Zirkonium end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
